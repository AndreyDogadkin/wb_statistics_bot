import datetime
from dataclasses import dataclass
from pathlib import Path

from aiogram import types
from pydantic_settings import BaseSettings, SettingsConfigDict

from bot.core.enums import Limits

BASE_DIR = Path(__file__).resolve().parent.parent.parent

MSC_TIME_DELTA = datetime.timedelta(hours=3)
MSC_TIME_ZONE = datetime.timezone(offset=MSC_TIME_DELTA, name='msc')


BOT_COMMANDS = [
    types.BotCommand(
        command='help',
        description='‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.',
    ),
    types.BotCommand(
        command='set_account',
        description='üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.',
    ),
    types.BotCommand(
        command='favorites',
        description='‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.',
    ),
    types.BotCommand(
        command='get_stats',
        description='üìà –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.',
    ),
    types.BotCommand(
        command='token',
        description='üîë –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.',
    ),
    types.BotCommand(
        command='my_limits',
        description='üíØ –ú–æ–∏ –ª–∏–º–∏—Ç—ã.',
    ),
    types.BotCommand(
        command='donate',
        description='ü©∂ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ.',
    ),
    types.BotCommand(
        command='cancel',
        description='‚Ü©Ô∏è –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è.',
    ),
    types.BotCommand(
        command='support',
        description='üîî –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ.',
    ),
]

DAY_LIMIT_DELTA = datetime.timedelta(hours=Limits.DAY_LIMIT.value)


class EnvBaseSettings(BaseSettings):
    model_config = SettingsConfigDict(
        env_file='.env',
        env_file_encoding='utf-8',
        extra='ignore',
    )


class BotSettings(EnvBaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."""

    TEST_SERVER: bool
    TG_TOKEN: str
    TG_TOKEN_SUPPORT: str
    NGROK_URL: str
    ADMINS: list
    SUPPORT_ID: int
    PROXY: str


class DatabaseSettings(EnvBaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    DB_PROD: bool
    DB_TEST_PATH: str = f'{BASE_DIR}/test_database.sqlite3'
    DB_HOST: str
    DB_PORT: int
    DB_NAME: str
    DB_USER: str
    DB_PASSWORD: str

    @property
    def db_url(self):
        return (
            'postgresql+asyncpg://'
            f'{self.DB_USER}:{self.DB_PASSWORD}'
            f'@{self.DB_HOST}:{self.DB_PORT}/{self.DB_NAME}'
        )

    @property
    def test_db_url(self):
        return f'sqlite+aiosqlite:///{self.DB_TEST_PATH}'


class EncryptionSettings(EnvBaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."""

    ENCRYPTION_KEY: bytes


@dataclass
class MainConfig:
    bot: BotSettings
    database: DatabaseSettings
    encryption: EncryptionSettings


def get_config():
    return MainConfig(
        bot=BotSettings(),
        database=DatabaseSettings(),
        encryption=EncryptionSettings(),
    )


main_config = get_config()
