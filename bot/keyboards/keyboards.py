from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

from bot.core.enums import Periods
from bot.keyboards import (
    NmIdsCallbackData,
    PaginationNmIds,
    DaysCallbackData,
    TokenTypeCallbackData,
    FavoritesCallbackData,
    FavoritesDeleteCallbackData,
    HelpCallbackData,
    AccountsCallbackData,
    AccountsEditCallbackData,
    AccountsDeleteCallbackData,
)
from bot.models import FavoriteRequest, WBAccount


class MakeMarkup:
    """–†–∞–±–æ—Ç–∞ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏."""

    @classmethod
    def nm_ids_markup(
        cls, data, page_number: int, add_to_favorite: bool = False
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        markup = InlineKeyboardBuilder()
        for nm in data[page_number]:
            markup.button(
                text=nm[0], callback_data=NmIdsCallbackData(nm_id=nm[2]).pack()
            )
        markup.adjust(2)
        markup.attach(cls.__pagination_builder(page_number, len(data)))
        markup.attach(
            cls.add_to_favorite_builder(add_to_favorite=add_to_favorite)
        )
        markup.attach(cls.cancel_builder())
        return markup.as_markup()

    @classmethod
    def account_markup(
        cls,
        accounts: list[WBAccount],
        gateway: bool = False,
        edit: bool = False,
        delete: bool = False,
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        markup = InlineKeyboardBuilder()
        callback_class = AccountsCallbackData
        if edit:
            callback_class = AccountsEditCallbackData
        elif delete:
            callback_class = AccountsDeleteCallbackData
        for account in accounts:
            if account.is_now_active and gateway:
                account.name = f'‚ùñ {account.name} ‚ùñ'
            markup.button(
                text=account.name,
                callback_data=callback_class(
                    name=account.name, id=account.id
                ).pack(),
            )
        markup.adjust(1)
        if delete:
            markup.row(
                cls.empty_button(),
                cls.empty_button(),
                cls.delete_button(delete=delete),
            )
        elif edit:
            markup.row(
                cls.empty_button(),
                cls.edit_button(edit=edit),
                cls.empty_button(),
            )
        elif len(accounts) == 1:
            markup.row(
                cls.add_button(),
                cls.edit_button(edit=edit),
                cls.empty_button(),
            )
        else:
            markup.row(
                cls.add_button(),
                cls.edit_button(edit=edit),
                cls.delete_button(delete=delete),
            )
        markup.attach(cls.cancel_builder())
        return markup.as_markup()

    @classmethod
    def favorites_markup(
        cls, favorites: list[FavoriteRequest], delete: bool = False
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        markup = InlineKeyboardBuilder()
        callback_class = (
            FavoritesCallbackData
            if not delete
            else FavoritesDeleteCallbackData
        )
        for i, favorite in enumerate(favorites):
            markup.button(
                text=favorite.name,
                callback_data=callback_class(index_in_data=i).pack(),
            )
        markup.adjust(1)
        markup.row(cls.delete_button(delete))
        markup.attach(cls.cancel_builder())
        return markup.as_markup()

    @classmethod
    def periods_markup(cls) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        markup = InlineKeyboardBuilder()
        for period in Periods:
            markup.button(
                text=period[0],
                callback_data=DaysCallbackData(period=period[1]).pack(),
            )
        markup.adjust(3)
        markup.attach(cls.cancel_builder())
        return markup.as_markup()

    @classmethod
    def help_markup(cls) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
        commands = (
            ('–ê–∫–∫–∞—É–Ω—Ç—ã', 'set_account'),
            ('API –ö–ª—é—á–∏', 'token'),
            ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'get_stats'),
            ('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', 'favorites'),
            ('–õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤', 'my_limits'),
            ('–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π', 'cancel'),
            ('–£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏', 'delete_me'),
        )
        markup = InlineKeyboardBuilder()
        for command in commands:
            markup.button(
                text=command[0],
                callback_data=HelpCallbackData(command=command[1]).pack(),
            )
        markup.adjust(2)
        markup.attach(cls.cancel_builder())
        return markup.as_markup()

    @classmethod
    def cancel_builder(cls) -> InlineKeyboardBuilder:
        """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        markup = InlineKeyboardBuilder()
        cancel_button = InlineKeyboardButton(text='‚ùå', callback_data='cancel')
        markup.row(cancel_button)
        return markup

    @classmethod
    def add_to_favorite_builder(
        cls, add_to_favorite: bool = False
    ) -> InlineKeyboardBuilder:
        """–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."""
        text = '‚òÜ' if not add_to_favorite else '‚≠êÔ∏è'
        markup = InlineKeyboardBuilder()
        add_to_favorite_button = InlineKeyboardButton(
            text=text, callback_data=PaginationNmIds(command='favorite').pack()
        )
        markup.row(add_to_favorite_button)
        return markup

    @classmethod
    def add_button(cls) -> InlineKeyboardButton:
        """–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."""
        text = '‚úö'
        add_button = InlineKeyboardButton(text=text, callback_data='add')
        return add_button

    @classmethod
    def edit_button(cls, edit: bool = False) -> InlineKeyboardButton:
        """–ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        text = '‚úé' if not edit else '‚úèÔ∏è'
        callback_data = 'edit' if not edit else 'cancel_edit'
        edit_button = InlineKeyboardButton(
            text=text, callback_data=callback_data
        )
        return edit_button

    @classmethod
    def delete_button(cls, delete: bool = False) -> InlineKeyboardButton:
        """–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è."""
        text = '‚ô≤' if not delete else '‚ôªÔ∏è'
        callback_data = 'delete' if not delete else 'cancel_delete'
        delete_button = InlineKeyboardButton(
            text=text, callback_data=callback_data
        )
        return delete_button

    @classmethod
    def empty_button(cls):
        empty_button = InlineKeyboardButton(text=' ', callback_data=' ')
        return empty_button

    @classmethod
    def change_token_markup(cls, account) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
        tokens = account.tokens
        text_content, text_analytic = 'üî¥ –ö–æ–Ω—Ç–µ–Ω—Ç', 'üî¥ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'
        if tokens:
            text_content = (
                'üü¢ –ö–æ–Ω—Ç–µ–Ω—Ç' if tokens.wb_token_content else text_content
            )
            text_analytic = (
                'üü¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞' if tokens.wb_token_analytic else text_analytic
            )
        markup = InlineKeyboardBuilder()
        markup.button(
            text=text_content,
            callback_data=TokenTypeCallbackData(token_type='content').pack(),
        )
        markup.button(
            text=text_analytic,
            callback_data=TokenTypeCallbackData(token_type='analytic').pack(),
        )
        markup.adjust(2)
        markup.attach(cls.cancel_builder())
        return markup.as_markup()

    @classmethod
    def __pagination_builder(
        cls, page_number, page_count
    ) -> InlineKeyboardBuilder:
        """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
        markup = InlineKeyboardBuilder()
        prev_button = InlineKeyboardButton(
            text='<<', callback_data=PaginationNmIds(command='prev').pack()
        )
        next_button = InlineKeyboardButton(
            text='>>', callback_data=PaginationNmIds(command='next').pack()
        )
        empty_button = InlineKeyboardButton(text=' ', callback_data=' ')
        counter_button = InlineKeyboardButton(
            text=f'{page_number + 1}/{page_count}', callback_data='center'
        )
        if page_number + 1 == page_count and page_count != 1:
            markup.row(prev_button, counter_button, empty_button)
        elif page_number + 1 == page_count == 1:
            markup.row(empty_button, counter_button, empty_button)
        elif not page_number:
            markup.row(empty_button, counter_button, next_button)
        else:
            markup.row(prev_button, counter_button, next_button)
        return markup
