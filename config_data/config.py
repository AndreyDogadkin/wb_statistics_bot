import datetime
from dataclasses import dataclass
from pathlib import Path

from aiogram import types
from environs import Env
from pydantic_settings import BaseSettings

BASE_DIR = Path(__file__).resolve().parent.parent


BOT_COMMANDS = [
    types.BotCommand(
        command='help',
        description='‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.'
    ),
    types.BotCommand(
        command='set_account',
        description='üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.'
    ),
    types.BotCommand(
        command='favorites',
        description='‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.'
    ),
    types.BotCommand(
        command='get_stats',
        description='üìà –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.'
    ),
    types.BotCommand(
        command='token',
        description='üîë –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.'
    ),
    types.BotCommand(
        command='my_limits',
        description='üíØ –ú–æ–∏ –ª–∏–º–∏—Ç—ã.'
    ),
    types.BotCommand(
        command='donate',
        description='ü©∂ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ.'
    ),
    types.BotCommand(
        command='cancel',
        description='‚Ü©Ô∏è –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è.'
    ),
    types.BotCommand(
        command='support',
        description='üîî –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ.'
    )
]

PERIODS_FOR_REQUESTS = (
    ('–°–µ–≥–æ–¥–Ω—è', 0),
    ('2 –î–Ω—è', 1),
    ('3 –î–Ω—è', 2),
    ('5 –î–Ω–µ–π', 4),
    ('–ù–µ–¥–µ–ª—è', 7),
    ('2 –ù–µ–¥–µ–ª–∏', 14),
    ('–ú–µ—Å—è—Ü', 31),
    ('2 –ú–µ—Å—è—Ü–∞', 62),
    ('6 –ú–µ—Å—è—Ü–µ–≤', 183)
)

PAGINATION_SIZE = 5

REQUESTS_PER_DAY_LIMIT = 40
DAY_LIMIT = 6
DAY_LIMIT_DELTA = datetime.timedelta(hours=DAY_LIMIT)

MAX_LEN_FAVORITES = 5
MAX_LEN_ACCOUNTS = 3

DB_TEST_PATH = BASE_DIR / 'test_database.sqlite3'


class BotSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."""

    TEST_SERVER: bool
    TG_TOKEN: str
    TG_TOKEN_SUPPORT: str
    NGROK_URL: str
    ADMINS: list
    SUPPORT_ID: int


class DatabaseSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    DB_PROD: bool
    DB_URL_TEST: str = f'sqlite+aiosqlite:///{DB_TEST_PATH}'
    DB_HOST: str
    DB_PORT: int
    DB_NAME: str
    DB_USER: str
    DB_PASSWORD: str

    @property
    def db_url(self):
        return ('postgresql+asyncpg://'
                f'{self.DB_USER}:{self.DB_PASSWORD}'
                f'@{self.DB_HOST}:{self.DB_PORT}/{self.DB_NAME}')


class EncryptionSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."""

    ENCRYPTION_KEY: bytes


@dataclass
class MainConfig:
    bot: BotSettings
    database: DatabaseSettings
    encryption: EncryptionSettings


def get_config():
    Env().read_env()
    return MainConfig(
        bot=BotSettings(),
        database=DatabaseSettings(),
        encryption=EncryptionSettings()
    )


main_config = get_config()
